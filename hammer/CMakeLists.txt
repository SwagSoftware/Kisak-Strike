#//-----------------------------------------------------------------------------
#//	HAMMER_DLL.VPC
#//
#//	Project Script
#//-----------------------------------------------------------------------------

#DUMMY VERSION FOR CLION - WILL NOT BUILD! REQUIRES WAY TOO MUCH WINDOWS STUFF

project(hammer_client_dummy)
cmake_minimum_required(VERSION 3.16)

set(SRCDIR "${CMAKE_CURRENT_SOURCE_DIR}/../")
set(CMAKE_MODULE_PATH ${SRCDIR}/cmake)
set(OUTBINDIR ${SRCDIR}/../game/bin)
set(OUTBINNAME "hammer_client_dummy")
#set(DONT_DOWNGRADE_ABI "1")

#dont need to build this when building dedicated server
if( DEDICATED )
    return()
endif()

include(${CMAKE_MODULE_PATH}/detect_platform.cmake)
include(${CMAKE_MODULE_PATH}/source_dll_base.cmake)

#set(QT_VERSION 6)
#set(QT_REQUIRED_LIBS Core Gui Widgets)
#set(QT_REQUIRED_LIBS_QUALIFIED Qt6::Core Qt6::Gui Qt6::Widgets)
#set(CMAKE_PREFIX_PATH "/home/blackops/Qt/6.0.1/gcc_64/lib/cmake")
#find_package(Qt${QT_VERSION} COMPONENTS ${QT_REQUIRED_LIBS} REQUIRED)

include_directories(${SRCDIR}/common/shaderdll)
include_directories(${SRCDIR}/common/iostream)
include_directories(${SRCDIR}/common/dx9sdk/include)
include_directories(${SRCDIR}/engine)
include_directories(${SRCDIR}/game/shared)
include_directories(${SRCDIR}/utils/common)
include_directories(${SRCDIR}/public/wintab/include)
#include_directories(${Qt6Widgets_INCLUDE_DIRS})

add_definitions(-DVALVE -DPROTECTED_THINGS_ENABLE -DVERSION_SAFE_STEAM_API_INTERFACES -DNO_WARN_MBCS_MFC_DEPRECATION)
add_definitions(-DNO_MEMOVERRIDE_NEW_DELETE -D_ALLOW_RUNTIME_LIBRARY_MISMATCH -D_ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH -D_ALLOW_MSC_VER_MISMATCH)


target_sources(${OUTBINNAME} PRIVATE ${SRCDIR}/public/builddisp.cpp)
target_sources(${OUTBINNAME} PRIVATE buildnum.cpp)

target_sources(${OUTBINNAME} PRIVATE "buildnum.cpp")
target_sources(${OUTBINNAME} PRIVATE "camera.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/chunkfile.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/collisionutils.cpp")
#target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/ConfigManager.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/SourceAppInfo.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/disp_common.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/disp_powerinfo.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/filesystem_helpers.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/filesystem_init.cpp")
target_sources(${OUTBINNAME} PRIVATE "hammer_mathlib.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/keyframe/keyframe.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/rope_physics.cpp")
target_sources(${OUTBINNAME} PRIVATE "saveinfo.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/simple_physics.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/studio.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/vgui_controls/vgui_controls.cpp")
target_sources(${OUTBINNAME} PRIVATE "viewersettings.cpp")

#target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/tier0/afxmem_override.cpp")
target_sources(${OUTBINNAME} PRIVATE "anchormgr.cpp")
target_sources(${OUTBINNAME} PRIVATE "axes2.cpp")
target_sources(${OUTBINNAME} PRIVATE "boundbox.cpp")
target_sources(${OUTBINNAME} PRIVATE "brushops.cpp")
target_sources(${OUTBINNAME} PRIVATE "bsplighting.cpp")
target_sources(${OUTBINNAME} PRIVATE "bsplightingthread.cpp")
target_sources(${OUTBINNAME} PRIVATE "childfrm.cpp")
target_sources(${OUTBINNAME} PRIVATE "clipcode.cpp")
target_sources(${OUTBINNAME} PRIVATE "clock.cpp")
target_sources(${OUTBINNAME} PRIVATE "cmdsyncmesh.cpp")
target_sources(${OUTBINNAME} PRIVATE "createarch.cpp")
target_sources(${OUTBINNAME} PRIVATE "culltreenode.cpp")
target_sources(${OUTBINNAME} PRIVATE "detailobjects.cpp")
target_sources(${OUTBINNAME} PRIVATE "dispmanager.cpp")
target_sources(${OUTBINNAME} PRIVATE "dispmapimagefilter.cpp")
target_sources(${OUTBINNAME} PRIVATE "disppaint.cpp")
target_sources(${OUTBINNAME} PRIVATE "dispsew.cpp")
target_sources(${OUTBINNAME} PRIVATE "dispshore.cpp")
target_sources(${OUTBINNAME} PRIVATE "dispsubdiv.cpp")
target_sources(${OUTBINNAME} PRIVATE "dynamicdialogwnd.cpp")
target_sources(${OUTBINNAME} PRIVATE "editgameclass.cpp")
target_sources(${OUTBINNAME} PRIVATE "editgameconfigs.cpp")
target_sources(${OUTBINNAME} PRIVATE "entityconnection.cpp")
target_sources(${OUTBINNAME} PRIVATE "events.cpp")
target_sources(${OUTBINNAME} PRIVATE "filechangewatcher.cpp")
target_sources(${OUTBINNAME} PRIVATE "filteredcombobox.cpp")
target_sources(${OUTBINNAME} PRIVATE "gameconfig.cpp")
target_sources(${OUTBINNAME} PRIVATE "gamepalette.cpp")
target_sources(${OUTBINNAME} PRIVATE "gizmo.cpp")
target_sources(${OUTBINNAME} PRIVATE "gridnav.cpp")
target_sources(${OUTBINNAME} PRIVATE "hammer.cpp")
target_sources(${OUTBINNAME} PRIVATE "hammerscene.cpp")
target_sources(${OUTBINNAME} PRIVATE "hammervgui.cpp")
target_sources(${OUTBINNAME} PRIVATE "helperfactory.cpp")
target_sources(${OUTBINNAME} PRIVATE "history.cpp")
target_sources(${OUTBINNAME} PRIVATE "iconcombobox.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/interpolatortypes.cpp")
target_sources(${OUTBINNAME} PRIVATE "keyboard.cpp")
target_sources(${OUTBINNAME} PRIVATE "listboxex.cpp")
target_sources(${OUTBINNAME} PRIVATE "loadsave_map.cpp")
target_sources(${OUTBINNAME} PRIVATE "loadsave_rmf.cpp")
target_sources(${OUTBINNAME} PRIVATE "lpreview_thread.cpp")
target_sources(${OUTBINNAME} PRIVATE "lprvwindow.cpp")
target_sources(${OUTBINNAME} PRIVATE "mainfrm.cpp")
target_sources(${OUTBINNAME} PRIVATE "makeprefablibrary.cpp")
target_sources(${OUTBINNAME} PRIVATE "manifest.cpp")
target_sources(${OUTBINNAME} PRIVATE "manifestdialog.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapdoc.cpp")
target_sources(${OUTBINNAME} PRIVATE "mappath.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapview.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapview2d.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapview2dbase.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapview3d.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapviewlogical.cpp")
target_sources(${OUTBINNAME} PRIVATE "materialproxyfactory_wc.cpp")
target_sources(${OUTBINNAME} PRIVATE "mdiclientwnd.cpp")
target_sources(${OUTBINNAME} PRIVATE "messagewnd.cpp")
target_sources(${OUTBINNAME} PRIVATE "misc.cpp")
target_sources(${OUTBINNAME} PRIVATE "modelbrowser.cpp")
target_sources(${OUTBINNAME} PRIVATE "particlebrowser.cpp")
target_sources(${OUTBINNAME} PRIVATE "noise.cpp")
target_sources(${OUTBINNAME} PRIVATE "objectbar.cpp")
target_sources(${OUTBINNAME} PRIVATE "options.cpp")
target_sources(${OUTBINNAME} PRIVATE "osver.cpp")
target_sources(${OUTBINNAME} PRIVATE "prefab3d.cpp")
target_sources(${OUTBINNAME} PRIVATE "prefabs.cpp")
target_sources(${OUTBINNAME} PRIVATE "render.cpp")
target_sources(${OUTBINNAME} PRIVATE "render2d.cpp")
target_sources(${OUTBINNAME} PRIVATE "render3dms.cpp")
target_sources(${OUTBINNAME} PRIVATE "renderutils.cpp")
target_sources(${OUTBINNAME} PRIVATE "richeditctrlex.cpp")
target_sources(${OUTBINNAME} PRIVATE "runcommands.cpp")
target_sources(${OUTBINNAME} PRIVATE "runmap.cpp")
target_sources(${OUTBINNAME} PRIVATE "scenepreviewdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "selection.cpp")
target_sources(${OUTBINNAME} PRIVATE "soundbrowser.cpp")
target_sources(${OUTBINNAME} PRIVATE "soundsystem.cpp")
target_sources(${OUTBINNAME} PRIVATE "splash.cpp")
target_sources(${OUTBINNAME} PRIVATE "sprite.cpp")
target_sources(${OUTBINNAME} PRIVATE "ssolid.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/utils/common/scriplib.cpp")

target_sources(${OUTBINNAME} PRIVATE "tablet.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/vmfentitysupport.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/common/vmfmeshdatasupport.cpp")
target_sources(${OUTBINNAME} PRIVATE "stocksolids.cpp")
target_sources(${OUTBINNAME} PRIVATE "studiomodel.cpp")
target_sources(${OUTBINNAME} PRIVATE "targetnamecombo.cpp")
target_sources(${OUTBINNAME} PRIVATE "texturebox.cpp")
target_sources(${OUTBINNAME} PRIVATE "textureconverter.cpp")
target_sources(${OUTBINNAME} PRIVATE "texturewindow.cpp")
target_sources(${OUTBINNAME} PRIVATE "titlewnd.cpp")
target_sources(${OUTBINNAME} PRIVATE "treelist.cpp")
target_sources(${OUTBINNAME} PRIVATE "vguiwnd.cpp")
target_sources(${OUTBINNAME} PRIVATE "visgroup.cpp")

#$Folder	"Map classes"
#{
target_sources(${OUTBINNAME} PRIVATE "mapalignedbox.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapanimator.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapaxishandle.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapclass.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapcylinder.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapdecal.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapdisp.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapentity.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapface.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapfrustum.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapgroup.cpp")
target_sources(${OUTBINNAME} PRIVATE "maphelper.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapinstance.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapkeyframe.cpp")
target_sources(${OUTBINNAME} PRIVATE "maplight.cpp")
target_sources(${OUTBINNAME} PRIVATE "maplightcone.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapline.cpp")
target_sources(${OUTBINNAME} PRIVATE "maplineoccluder.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapoccluder.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapoverlay.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapoverlaytrans.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapplayerhullhandle.cpp")
target_sources(${OUTBINNAME} PRIVATE "mappoint.cpp")
target_sources(${OUTBINNAME} PRIVATE "mappointhandle.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapquadbounds.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapsidelist.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapsolid.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapsphere.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapsprite.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapstudiomodel.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapsweptplayerhull.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapviewer.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapworld.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapworldtext.cpp")
#}

#$Folder "Foundry"
#{
target_sources(${OUTBINNAME} PRIVATE "foundrytool.cpp")
target_sources(${OUTBINNAME} PRIVATE "${SRCDIR}/public/registry.cpp")
#}

#$Folder	"Tools"
#{
target_sources(${OUTBINNAME} PRIVATE "box3d.cpp")
target_sources(${OUTBINNAME} PRIVATE "tool3d.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolaxishandle.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolbase.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolblock.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolcamera.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolclipper.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolcordon.cpp")
target_sources(${OUTBINNAME} PRIVATE "tooldecal.cpp")
target_sources(${OUTBINNAME} PRIVATE "tooldisplace.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolentity.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolmagnify.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolmanager.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolmaterial.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolmorph.cpp")
target_sources(${OUTBINNAME} PRIVATE "tooloverlay.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolpickangles.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolpickentity.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolpickface.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolpointhandle.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolselection.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolsphere.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolsprinkle.cpp")
target_sources(${OUTBINNAME} PRIVATE "toolswepthull.cpp")
#}

#$Folder	"Texture/materials system"
#{
target_sources(${OUTBINNAME} PRIVATE "dummytexture.cpp")
target_sources(${OUTBINNAME} PRIVATE "material.cpp")
target_sources(${OUTBINNAME} PRIVATE "texture.cpp")
target_sources(${OUTBINNAME} PRIVATE "texturesystem.cpp")
target_sources(${OUTBINNAME} PRIVATE "wadtexture.cpp")
#}

#$Folder	"Shell"
#{
target_sources(${OUTBINNAME} PRIVATE "shell.cpp")
target_sources(${OUTBINNAME} PRIVATE "shellmessagewnd.cpp")
#}

#$Folder	"Controls"
#{
target_sources(${OUTBINNAME} PRIVATE "autoselcombo.cpp")
target_sources(${OUTBINNAME} PRIVATE "anglebox.cpp")
target_sources(${OUTBINNAME} PRIVATE "cordonlist.cpp")
target_sources(${OUTBINNAME} PRIVATE "grouplist.cpp")
#}

#$Folder	"Dialogs"
#{
target_sources(${OUTBINNAME} PRIVATE "archdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "dialogwithcheckbox.cpp")
target_sources(${OUTBINNAME} PRIVATE "dispdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "dlglistmanage.cpp")
target_sources(${OUTBINNAME} PRIVATE "editgroups.cpp")
target_sources(${OUTBINNAME} PRIVATE "editpathdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "editpathnodedlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "editprefabdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "entityhelpdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "entityreportdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "entitysprinkledlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "faceedit_disppage.cpp")
target_sources(${OUTBINNAME} PRIVATE "faceedit_materialpage.cpp")
target_sources(${OUTBINNAME} PRIVATE "faceeditsheet.cpp")
target_sources(${OUTBINNAME} PRIVATE "filtercontrol.cpp")
target_sources(${OUTBINNAME} PRIVATE "gotobrushdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "hammerbar.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapanimationdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapcheckdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapdiffdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "maperrorsdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "mapinfodlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "materialdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "newdoctype.cpp")
target_sources(${OUTBINNAME} PRIVATE "newkeyvalue.cpp")
target_sources(${OUTBINNAME} PRIVATE "newvisgroupdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "objectproperties.cpp")
target_sources(${OUTBINNAME} PRIVATE "objectpage.cpp")
target_sources(${OUTBINNAME} PRIVATE "op_entity.cpp")
target_sources(${OUTBINNAME} PRIVATE "op_flags.cpp")
target_sources(${OUTBINNAME} PRIVATE "op_groups.cpp")
target_sources(${OUTBINNAME} PRIVATE "op_input.cpp")
target_sources(${OUTBINNAME} PRIVATE "op_model.cpp")
target_sources(${OUTBINNAME} PRIVATE "op_output.cpp")
target_sources(${OUTBINNAME} PRIVATE "optbuild.cpp")
target_sources(${OUTBINNAME} PRIVATE "optconfigs.cpp")
target_sources(${OUTBINNAME} PRIVATE "optgeneral.cpp")
target_sources(${OUTBINNAME} PRIVATE "optionproperties.cpp")
target_sources(${OUTBINNAME} PRIVATE "opttextures.cpp")
target_sources(${OUTBINNAME} PRIVATE "optview2d.cpp")
target_sources(${OUTBINNAME} PRIVATE "optview3d.cpp")
target_sources(${OUTBINNAME} PRIVATE "pastespecialdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "prefabsdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "progdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "replacetexdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "runmapcfgdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "runmapexpertdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "scaleverticesdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "sculptoptions.cpp")
target_sources(${OUTBINNAME} PRIVATE "searchreplacedlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "selectentitydlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "selectmodedlgbar.cpp")
target_sources(${OUTBINNAME} PRIVATE "strdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "syncfiledialog.cpp")
target_sources(${OUTBINNAME} PRIVATE "texturebar.cpp")
target_sources(${OUTBINNAME} PRIVATE "texturebrowser.cpp")
target_sources(${OUTBINNAME} PRIVATE "torusdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "transformdlg.cpp")
target_sources(${OUTBINNAME} PRIVATE "versioncontroldialog.cpp")
target_sources(${OUTBINNAME} PRIVATE "fadedlg.cpp")
#}

target_sources(${OUTBINNAME} PRIVATE "hammer.cpp")

#target_link_libraries(${OUTBINNAME} bitmap_client bonesteup_client datamodel_client)
#target_link_libraries(${OUTBINNAME} ${QT_REQUIRED_LIBS_QUALIFIED})


#Don't actually build during `make all` - This is just for clion
set_target_properties(${OUTBINNAME} PROPERTIES EXCLUDE_FROM_ALL TRUE)